plugins {
    id 'jacoco-report-aggregation'
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'org.benchmarker'
version = '1.0.0'

def excludeJacocoTestCoverageReport = [
        // bmagent
        'org/benchmarker/bmagent/BmAgentApplication**',
        'org/benchmarker/bmagent/sse/**',
        'org/benchmarker/bmagent/consts/SystemSchedulerConst',
        'org/benchmarker/bmagent/status/**',
        'org/benchmarker/bmagent/initializer/**',
//        'org/benchmarker/bmagent/**',
]

java {
    sourceCompatibility = '17'
}

ext {
    set('springCloudVersion', "2023.0.0")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

jacoco {
    toolVersion = "0.8.8"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // add webflux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.1'
    implementation "io.jsonwebtoken:jjwt-api:0.11.1"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:0.11.1"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:0.11.1"
    if (isAppleSilicon()) {
        runtimeOnly("io.netty:netty-resolver-dns-native-macos:4.1.94.Final:osx-aarch_64")
    }

    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    implementation project(':bm-common')
}

tasks.named('test') {
    useJUnitPlatform()
    jacoco

    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }

    // Set the path to the source files
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: excludeJacocoTestCoverageReport)
    }))
    finalizedBy 'jacocoTestCoverageVerification'
}

// task for Jacoco test coverage verification
jacocoTestCoverageVerification {
    violationRules {
        rule {
            // Set the path to the source files
            classDirectories.setFrom(tasks.jacocoTestReport.classDirectories)
            element = 'CLASS'
            enabled = true

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }
        }
    }
}

boolean isAppleSilicon() {
    return System.getProperty("os.name") == "Mac OS X" && System.getProperty("os.arch") == "aarch64"
}